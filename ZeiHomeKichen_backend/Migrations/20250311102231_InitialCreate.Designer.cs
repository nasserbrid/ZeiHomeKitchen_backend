// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZeiHomeKichen_backend.Models;

#nullable disable

namespace ZeiHomeKichen_backend.Migrations
{
    [DbContext(typeof(ZeiHomeKitchenContext))]
    [Migration("20250311102231_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlatIngredient", b =>
                {
                    b.Property<int>("IdPlat")
                        .HasColumnType("int")
                        .HasColumnName("id_plat");

                    b.Property<int>("IdIngredient")
                        .HasColumnType("int")
                        .HasColumnName("id_ingredient");

                    b.HasKey("IdPlat", "IdIngredient")
                        .HasName("PK__Plat_Ing__F0D67DD1995683C7");

                    b.HasIndex("IdIngredient");

                    b.ToTable("Plat_Ingredient", (string)null);
                });

            modelBuilder.Entity("PlatReservation", b =>
                {
                    b.Property<int>("IdPlat")
                        .HasColumnType("int")
                        .HasColumnName("id_plat");

                    b.Property<int>("IdReservation")
                        .HasColumnType("int")
                        .HasColumnName("id_reservation");

                    b.HasKey("IdPlat", "IdReservation")
                        .HasName("PK__Plat_Res__D02F0F612D2E8B6D");

                    b.HasIndex("IdReservation");

                    b.ToTable("Plat_Reservation", (string)null);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Ingredient", b =>
                {
                    b.Property<int>("IdIngredient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ingredient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIngredient"));

                    b.Property<string>("Nom")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nom");

                    b.HasKey("IdIngredient")
                        .HasName("PK__Ingredie__9D79738D795CDDBD");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Paiement", b =>
                {
                    b.Property<int>("IdPaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_paiement");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaiement"));

                    b.Property<int>("IdReservation")
                        .HasColumnType("int")
                        .HasColumnName("id_reservation");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("montant");

                    b.Property<string>("Moyen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("moyen");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("statut");

                    b.HasKey("IdPaiement")
                        .HasName("PK__Paiement__72D44CFFB0ACBCD7");

                    b.HasIndex(new[] { "IdReservation" }, "UQ__Paiement__92EE588EE27DA788")
                        .IsUnique();

                    b.ToTable("Paiement", (string)null);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Plat", b =>
                {
                    b.Property<int>("IdPlat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_plat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlat"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<string>("Nom")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nom");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("prix");

                    b.HasKey("IdPlat")
                        .HasName("PK__Plat__3901EAE9C48A75E2");

                    b.ToTable("Plat", (string)null);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reservation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservation"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adresse");

                    b.Property<DateTime?>("DateReservation")
                        .HasColumnType("datetime")
                        .HasColumnName("date_reservation");

                    b.Property<int>("IdStatistique")
                        .HasColumnType("int")
                        .HasColumnName("id_statistique");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("id_utilisateur");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("statut");

                    b.HasKey("IdReservation")
                        .HasName("PK__Reservat__92EE588FA8CE9DBE");

                    b.HasIndex("IdStatistique");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Reservation", null, t =>
                        {
                            t.HasTrigger("Statistique_Reservations");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Statistique", b =>
                {
                    b.Property<int>("IdStatistique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_statistique");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatistique"));

                    b.Property<DateOnly>("DateStatistique")
                        .HasColumnType("date")
                        .HasColumnName("date_statistique");

                    b.Property<int>("TotalReservation")
                        .HasColumnType("int")
                        .HasColumnName("total_reservation");

                    b.HasKey("IdStatistique")
                        .HasName("PK__Statisti__6AA7C9478605DF6E");

                    b.ToTable("Statistique", (string)null);
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeiHomeKichen_backend.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatIngredient", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IdIngredient")
                        .IsRequired()
                        .HasConstraintName("FK__Plat_Ingr__id_in__4F7CD00D");

                    b.HasOne("ZeiHomeKichen_backend.Models.Plat", null)
                        .WithMany()
                        .HasForeignKey("IdPlat")
                        .IsRequired()
                        .HasConstraintName("FK__Plat_Ingr__id_pl__4E88ABD4");
                });

            modelBuilder.Entity("PlatReservation", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Plat", null)
                        .WithMany()
                        .HasForeignKey("IdPlat")
                        .IsRequired()
                        .HasConstraintName("FK__Plat_Rese__id_pl__4AB81AF0");

                    b.HasOne("ZeiHomeKichen_backend.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("IdReservation")
                        .IsRequired()
                        .HasConstraintName("FK__Plat_Rese__id_re__4BAC3F29");
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Paiement", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Reservation", "IdReservationNavigation")
                        .WithOne("Paiement")
                        .HasForeignKey("ZeiHomeKichen_backend.Models.Paiement", "IdReservation")
                        .IsRequired()
                        .HasConstraintName("FK__Paiement__id_res__47DBAE45");

                    b.Navigation("IdReservationNavigation");
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Reservation", b =>
                {
                    b.HasOne("ZeiHomeKichen_backend.Models.Statistique", "IdStatistiqueNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdStatistique")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__id_st__412EB0B6");

                    b.HasOne("ZeiHomeKichen_backend.Models.Utilisateur", "IdUtilisateurNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdUtilisateur")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__id_ut__4222D4EF");

                    b.Navigation("IdStatistiqueNavigation");

                    b.Navigation("IdUtilisateurNavigation");
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Reservation", b =>
                {
                    b.Navigation("Paiement");
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Statistique", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ZeiHomeKichen_backend.Models.Utilisateur", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
